version: 2.1

executors:
  default:
    machine:
      image: ubuntu-1604-cuda-10.1:201909-23
    working_directory: ~/gpuci
    resource_class: gpu.nvidia.medium

restore-workspace: &restore-workspace
  attach_workspace:
    at: ~/

restore-cache: &restore-cache
  restore_cache:
    keys:
      - cargo-v0-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
      - repo-source-{{ .Branch }}-{{ .Revision }}

jobs:

  cargo_fetch:
    executor: default
    steps:
      - checkout
      - run: curl https://sh.rustup.rs -sSf | sh -s -- -y
      - run: echo 'export PATH="$HOME:~/.cargo/bin:$PATH"' >> $BASH_ENV
      - run: echo $BASH_ENV
      - run: echo $HOME
      - run: source $BASH_ENV
      - run: cargo --version
      - run: rustc --version
      - run:
          name: Update submodules
          command: git submodule update --init --recursive
      - run:
          name: Calculate dependencies
          command: cargo generate-lockfile
      - restore_cache:
          keys:
            - cargo-v0-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
      - run: cargo update
      - run: cargo fetch
      - run: rustup install $(cat rust-toolchain)
      - run: rustup default $(cat rust-toolchain)
      - run: rustc --version
      - run: rm -rf .git
      - persist_to_workspace:
          root: ~/
          paths:
            - gpuci
      - save_cache:
          key: cargo-v0-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
          paths:
            - "~/.cargo"
            - "~/.rustup"

  test:
    executor: default
    parameters:
      cargo-options:
        type: string
        default: ""
    steps:
      - run: echo 'export PATH="$HOME:~/.cargo/bin:$PATH"' >> $BASH_ENV
      - run: source $BASH_ENV
      - run: sudo apt-get update -y
      - run: apt-cache search opencl
      - run: sudo apt install -y ocl-icd-opencl-dev
      - *restore-workspace
      - *restore-cache
      - run:
          name: Test (<< parameters.cargo-options >>)
          command: cargo test << parameters.cargo-options >>

  rustfmt:
    executor: default
    steps:
      - *restore-workspace
      - *restore-cache
      - run: echo 'export PATH="$HOME:~/.cargo/bin:$PATH"' >> $BASH_ENV
      - run: source $BASH_ENV
      - run:
          name: Run cargo fmt
          command: cargo fmt --all -- --check

  clippy:
    executor: default
    steps:
      - *restore-workspace
      - *restore-cache
      - run: echo 'export PATH="$HOME:~/.cargo/bin:$PATH"' >> $BASH_ENV
      - run: source $BASH_ENV
      - run:
          name: Run cargo clippy (features (cuda + opencl))
          command: cargo clippy --workspace --all-targets -- -D warnings
      - run:
          name: Run cargo clippy (cuda)
          command: cargo clippy --workspace --all-targets --no-default-features --features cuda -- -D warnings
      - run:
          name: Run cargo clippy (opencl)
          command: cargo clippy --workspace --all-targets --no-default-features --features opencl -- -D warnings

  rustdoc:
    executor: default
    steps:
      - *restore-workspace
      - *restore-cache
      - run: echo 'export PATH="$HOME:~/.cargo/bin:$PATH"' >> $BASH_ENV
      - run: source $BASH_ENV
      - run:
          name: Run cargo rustdoc (default features (cuda + opencl))
          command: cargo rustdoc --all-targets -- -D warnings
      - run:
          name: Run cargo rustdoc (cuda)
          command: cargo rustdoc --all-targets --no-default-features --features cuda -- -D warnings
      - run:
          name: Run cargo rustdoc (opencl)
          command: cargo rustdoc --all-targets --no-default-features --features opencl -- -D warnings

workflows:
  version: 2.1

  test:
    jobs:
      - cargo_fetch
      - rustfmt:
          requires:
            - cargo_fetch
      - clippy:
          requires:
            - cargo_fetch
      - rustdoc:
          requires:
            - cargo_fetch
      # TODO vmx 2021-07-09: Install CUDA properly on CI
      #- test:
      #    name: Test with default features (cuda + opencl)
      #    requires:
      #      - cargo_fetch
      #- test:
      #    name: Test CUDA
      #    cargo-options: "--no-default-features --features cuda"
      #    requires:
      #      - cargo_fetch
      - test:
          name: Test OpenCL
          cargo-options: "--no-default-features --features opencl"
          requires:
            - cargo_fetch
